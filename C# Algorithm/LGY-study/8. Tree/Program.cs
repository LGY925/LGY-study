namespace _8._Tree
{

    /****************************************************************\
     * 트리 (Tree)
     * 
     * 계층적인 자료를 나타내는데 자주 사용되는 자료구조
     * 부모노드가 여러자식노드들을 가질수 있는 1대 다 구조
     * 한 노드에서 출발하여 다시 자기 자신의 노드로 돌아오는 순환구조
    \****************************************************************/

    // <트리 구성>
    // 부모(Parent) : 루트 노드 방향으로 직접 연결된 노드
    // 자식(Child)  : 루트 노드 반대방향으로 직접 연결된 노드
    //
    // 뿌리(root)   : 부모노드가 없는 최상위 노드, 트리의 깊이 0에 하나만 존재
    // 가지(Branch) : 부모노드와 자식노드가 모두 있는 노드, 트리의 중간에 존재
    // 잎(Leaf)     : 자식노드가 없는 노드, 트리의 끝에 존재
    //
    // 길이(Length) : 출발 노드에서 도착 노드까지 거치는 수
    // 깊이(Depth)  : 루트 노드부터의 길이
    // 차수(Degree) : 자식노드의 갯수
    //
    //             뿌리                  - 깊이 0
    //        ┌─────┼─────┐
    //       가지  가지  가지            - 깊이 1
    //  ┌─────┤     │     │
    // 가지  가지   잎   가지            - 깊이 2
    //  │     │           ├────┬────┐
    //  잎    잎         가지  잎   잎   - 깊이 3
    //                    ├────┐
    //                    잎   잎        - 깊이 4


    // <트리 사용처>
    // 주로 계층구조를 가질 수 있는 자료나 효율적인 검색에 많이 사용됨
    // ex) 윈도우의 폴더 구조, 문서의 목차, 데이터 베이스 & 검색 엔진의 구조
    //     상위스킬을 배워야 하위스킬을 배울 수 있는 스킬트리


    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
        }
    }
}
