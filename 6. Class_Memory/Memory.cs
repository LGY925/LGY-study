namespace _6.Class_Memory_Namespace
{
    internal class Memory
    {

        #region 메모리 (Memory)
        /*****************************************************************\
         * 값타입과 참조타입
        \*****************************************************************/

        /*****************************************************************\
         * 메모리 (Memory)
         *
         * 프로그램을 처리하기 위해 필요한 정보를 저장하는 기억장치
         * 프로그램은 메모리에 저장한 정보를 토대로 명령들을 수행함
        \*****************************************************************/

        /*****************************************************************\
         * 메모리 구조(Memory Structure)
         * 
         * 프로그램은 효율적인 메모리 사용을 위해 메모리를 여러 영역으로 나눔
         * 데이터는 각 역할마다 저장되는 영역을 달리하여 접근범위(Access Limiting), 생존범위가 달라짐
        \*****************************************************************/

        /*****************************************************************\ 
         * <메모리 구조>
           (0x0000...) ┌─────────────┐
           Low Address │ Code Area   │ → Program Code
                       ├─────────────┤
                       │ Data Area   │ → Static Variable
                       ├─────────────┤
                       │ Heap Area   │ → Class Instance
                       │.............│
                       │             │
                       │.............│
         Higher Address│ Stack Area  │ → Local Variable, Parameter Variable
           (0xFFFF...) └─────────────┘
        \*****************************************************************/

        // <코드 영역> (Code Area)
        // 프로그램이 실행할 코드가 저장되는 영역
        // 데이터가 변경되지 않은 읽기 전용 데이터

        // <데이터 영역> (Data Area)
        // 정적변수(Static Variable)가 저장되는 영역
        // 프로그램의 시작시 할당되며 종료시 삭제됨
        // 접근 범위는 프로그램 전체 (All Ranges)

        // <스택 영역> (Stack Area)
        // 지역변수(Local Variable)와 매개변수(Parameter Variable)가 저장되는 영역
        // 함수의 호출시 할당되며 종료시 삭제됨
        // 접근 범위는 블록 시작에서 끝까지 (Inside The Block)

        // <힙 영역> (Heap Area)
        // 클래스 인스턴스(Class Instance)가 저장되는 영역
        // 인스턴스를 생성시 할당되며 더이상 사용하지 않을시 자동으로 삭제됨
        // 인스턴스를 참조하고 있는 변수가 없을 때 더이상 사용하지 않는다고 판단
        // 더이상 사용하지 않는 인스턴스는 가비지 컬랙터가 특정 타이밍에 수거해감
        // 접근 범위는 인스턴스 생성에서 더이상 사용하지 않을때까지 (Available for Reference)

        // <변수의 접근범위와 생존범위>
        /*****************************************************************\
                             │ Memory Structure │ Access Limiting  │ 생존 범위
         ────────────────────┼──────────────────┼──────────────────┼───────────────────────────
          Static Variable    │ Data Area        │ All Ranges       │ 프로그램 시작에서 끝까지
         ────────────────────┼──────────────────┼──────────────────┼───────────────────────────
          Local Variable     │ Stack Area       │ Inside The Block │ 블록 시작에서 끝까지
          Parameter Variable │                  │                  │
         ────────────────────┼──────────────────┼──────────────────┼───────────────────────────
          Class Instance     │ Heap Area        │ Available for    │ 인스턴스 생성에서
                             │                  │ Referenc         │ 더이상 사용하지 않을때까지
         ────────────────────┼──────────────────┼──────────────────┼───────────────────────────
       \*****************************************************************/
        #endregion

        #region 스택 영역 (Stack Area)
        /*****************************************************************\
         *  스택 영역 (Stack Area)
         *
         * 함수호출스택을 이용하여 호출과 종료에 연관되는 데이터를 저장하는 영역
         * 프로그램은 스택구조를 통해 함수에서 사용한 데이터들을 효율적으로 관리함
        \*****************************************************************/

        void Stack2(int a)
         {
             a = 3;
         }
         void Stack1(int a)
         {
             a = 2;
             Stack2(a);
         }

         void Main1()
         {
             int a = 1;
             Stack1(a);
         }

        /*******************************************************************************************************\
         
              1.          ┌───────────┐ 2.            ┌───────────┐ 3.            ┌───────────┐
                          │           │               │           │               │           │
                          │           │               │           │               ├───────────┤
                          │           │               │           │               │ Stack2()  │
                          │           │               │           │               │ a = 3     │
                          │           │               ├───────────┤               ├───────────┤
                          │           │               │ Stack1()  │               │ Stack1()  │
                          │           │               │ a = 2     │               │ a = 2     │
                          ├───────────┤               ├───────────┤               ├───────────┤
                          │ Main1()   │               │ Main1()   │               │ Main1()   │
                          │ a = 1     │               │ a = 1     │               │ a = 1     │
             Main1 call → └───────────┘ Stack1 call → └───────────┘ Stack2 call → └───────────┘

             4.           ┌───────────┐ 5.            ┌───────────┐ 6.            ┌───────────┐
                          │           │               │           │               │           │
                          │           │               │           │               │           │
                          │           │               │           │               │           │
                          │           │               │           │               │           │
                          ├───────────┤               │           │               │           │
                          │ Stack1()  │               │           │               │           │
                          │ a = 2     │               │           │               │           │
                          ├───────────┤               ├───────────┤               │           │
                          │ Main1()   │               │ Main1()   │               │           │
                          │ a = 1     │               │ a = 1     │               │           │
            Stack2 end →  └───────────┘ Stack1 end →  └───────────┘  Main1 end  → └───────────┘

        \*******************************************************************************************************/
        #endregion

        #region 힙 영역 (Heap Area)
        /*****************************************************************\
         * 힙 영역 (Heap Area)
         *
         * 클래스 인스턴스가 보관하는 영역
         * 프로그램은 가비지 콜렉터를 통해 더이상 사용하지 않는 인스턴스를 수거함
        \*****************************************************************/

        // <가비지 콜렉터>(Garbage Collector)
        class HeapClass { }

        void Main2()
        {
        // 함수 시작시(Function Start) 지역변수 local(null)생성
        // 지역변수 local 이 스택 영역에 저장됨

            HeapClass local;              // 함수 시작시 이미 메모리에 할당되어 있음
            local = new HeapClass();      // 인스턴스를 힙영역에 생성하고 주소값을 local에 보관

        // 함수 종료시(Function End)
        // 지역변수 local 이 함수 종료와 함께 소멸됨
        // 인스턴스(Instance) new HeapClass() 는 함수 종료와 함께 더이상 참조하는 변수가 없음
        // 인스턴스(Instance) new HeapClass() 는 가비지가 되어 가비지 컬렉터(Garbage Collector)가 동작(Behavior)할 때 소멸됨
        }

        /*******************************************************************************************************\

              1.             ┌─────────────┐ 2.                 ┌─────────────┐
                             │             │                    │             │
                             │             │               0x56 ├─────────────┤
                             │             │                ┌──→│ HeapClass   │
                             │             │                │   │ Instance    │
                             │             │                │   ├─────────────┤
                             │             │                │   │             │
                             │             │                │   │             │
                             │             │                │   │             │
                             ├─────────────┤                │   ├─────────────┤
                             | local(null) |                └───│ local(0x56) │
            Function Start → └─────────────┘  Instance create → └─────────────┘

             3.              ┌─────────────┐ 4.                 ┌─────────────┐
                             │             │                    │             │
                             ├─────────────┤                    │             │
                No more      │ HeapClass   │                    │             │
                references   │ Instance    │                    │             │
                             ├─────────────┤                    │             │
                             │             │                    │             │
                             │             │                    │             │
                             │             │                    │             │
                             │             │                    │             │
                             │             │ Garbage Collector  │             │
              Function End → └─────────────┘ Behavior         → └─────────────┘

        \*******************************************************************************************************/
        #endregion

        #region 데이터 영역 (Data Area)
        /*****************************************************************\
         * 데이터 영역 (Data Area)
         *
         * 정적변수를 저장하는 영역
         * 프로그램은 시작시 데이터 영역을 생성하며 종료시 데이터 영역을 해제함
        \*****************************************************************/

        // <정적 (Static)>
        // 프로그램의 시작과 함께 할당, 프로그램 종료시에 소멸, 프로그램이 동작하는 동안 항상 고정된 위치에 존재
        // 정적 변수 (Static Variable) : 클래스의 이름을 통해 접근하는 변수
        // 정적 함수 (Static Function) : 클래스의 이름을 통해 접근하는 함수
        // 정적 클래스 (Static Instance) : 정적변수와 정적함수만을 포함하는 클래스

        class Student
       {
           private static int count;
           private int id;

           public Student()
           {
               id = ++count;
           }

           public static int GetCount()
           {
               return count;
           }

           public int GetID()
           {
               return id;
           }
       }

       void Main3()
       {
           Student student1 = new Student();
           Student student2 = new Student();
           Student student3 = new Student();

           Console.WriteLine($"학생1의 ID : {student1.GetID()}");
           Console.WriteLine($"학생2의 ID : {student2.GetID()}");
           Console.WriteLine($"학생3의 ID : {student3.GetID()}");
           Console.WriteLine($"총 학생수 : {Student.GetCount()}");
       }


       static class Setting
       {
           public static int volume;
           public static void Reset() { volume = 100; }

           // public int value;            // error : 정적클래스에서 멤버변수를 포함할 수 없음
           // public void Func() { }       // error : 정적클래스에서 멤버함수를 포함할 수 없음
       }

       void Main4()
       {
           // Setting setting = new Setting();     // error : 정적클래스의 인스턴스 생성불가
           Setting.volume = 50;
           Setting.Reset();
       }
        #endregion

    }
}

